import logging
from collections import namedtuple
from datetime import datetime
from typing import Any, Dict, Union
import urllib.parse

from django.conf import settings
from django.http import HttpRequest, HttpResponse, JsonResponse
from django.shortcuts import redirect
from django.urls import reverse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_POST

from pylti1p3.contrib.django import DjangoOIDCLogin, DjangoMessageLaunch, \
    DjangoCacheDataStorage, DjangoDbToolConf

logger = logging.getLogger(__name__)

COURSE_MEMBERSHIP = 'http://purl.imsglobal.org/vocab/lis/v2/membership'
DUMMY_CACHE = 'DummyCache'

TOOL_CONF = DjangoDbToolConf()

# do not require deployment ids if LTI_CONFIG_DISABLE_DEPLOYMENT_ID_VALIDATION is true
class ExtendedDjangoMessageLaunch(DjangoMessageLaunch):
    def validate_deployment(self):
        if settings.LTI_CONFIG_DISABLE_DEPLOYMENT_ID_VALIDATION:
            return self

        return super().validate_deployment()

def lti_error(error_message: Any) -> JsonResponse:
    """
    Log an error message and return a JSON response with HTTP status 500.

    :param error_message: `Any` type is allowed so objects may be used
    :return: JsonResponse, with status 500
    """
    logger.error(f'LTI error: {error_message}')
    return JsonResponse({'lti_error': f'{error_message}'}, status=500)


def generate_jwks() -> Dict[str, list]:
    return TOOL_CONF.get_jwks()

def get_jwks(_: Any) -> JsonResponse:
    """
    Return JWKS generated by `pylti1p3`, based on public key

    :param _: Django passes a Request object, but this method doesn't use it.
    :return: `JsonResponse` containing JWKS or error message.
    """
    try:
        jwks = generate_jwks()
    except Exception as e:
        return lti_error(e)
    return JsonResponse(jwks)


def generate_config_json(request: HttpRequest) -> \
        Union[HttpResponse, JsonResponse]:
    parameters = {
        'timestamp': datetime.now().isoformat(),
        'host': request.get_host(),
        'base_url': urllib.parse.urlunsplit(
            [request.scheme, request.get_host()] + 3 * ['']),
        'login_url_suffix': reverse('lti_login'),
        'launch_url_suffix': reverse('lti_launch'),
        'jwks_url_suffix': reverse('lti_get_jwks'),
    }

    template_path = 'templates/lti_config_template.json'

    logger.debug(f'template_path: "{template_path}"')

    template_contents: str
    try:
        with open(template_path, 'r') as template_file:
            template_contents = template_file.read()
    except OSError as error:
        return lti_error('Error reading LTI template file '
                         f'"{template_path}": ({error})')

    config_json: str
    try:
        config_json = template_contents % parameters
    except KeyError as error:
        return lti_error('Error filling in LTI template from '
                         f'"{template_path}": ({error})')

    return HttpResponse(config_json, content_type='application/json')


def get_cache_config():
    CacheConfig = namedtuple('CacheConfig', ['is_dummy_cache', 'launch_data_storage', 'cache_lifetime'])
    is_dummy_cache = DUMMY_CACHE in settings.DB_CACHE_CONFIGS['BACKEND']
    launch_data_storage = DjangoCacheDataStorage(cache_name='default') if not is_dummy_cache else None
    cache_ttl = settings.DB_CACHE_CONFIGS['CACHE_TTL']
    cache_lifetime = cache_ttl if cache_ttl else 7200
    return CacheConfig(is_dummy_cache, launch_data_storage, cache_lifetime)

@csrf_exempt
def login(request):
    target_link_uri = request.POST.get('target_link_uri', request.GET.get('target_link_uri'))
    if not target_link_uri:
        error_message = 'LTI Login failed due to missing "target_link_uri" param'
        return lti_error(error_message)
    CacheConfig = get_cache_config()
    oidc_login = DjangoOIDCLogin(request, TOOL_CONF, launch_data_storage=CacheConfig.launch_data_storage)
    return oidc_login.enable_check_cookies().redirect(target_link_uri)


@require_POST
@csrf_exempt
def launch(request):
    CacheConfig = get_cache_config()
    message_launch = ExtendedDjangoMessageLaunch(request, TOOL_CONF, launch_data_storage=CacheConfig.launch_data_storage)
    if not CacheConfig.is_dummy_cache:
        # fetch platform's public key from cache instead of calling the API will speed up the launch process
        message_launch.set_public_key_caching(CacheConfig.launch_data_storage,
                                              cache_lifetime=CacheConfig.cache_lifetime)
    else:
        logger.info('DummyCache is set up, recommended atleast to us Mysql DB cache for LTI advantage services')

    url = reverse('home')
    return redirect(url)